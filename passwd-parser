#!/usr/bin/env python

"""
Utility for parsing the UNIX /etc/passwd and /etc/groups files and combine the data into a single json output.
This project is licensed under the terms of the MIT license
Copyright (c) 2018 Philip Peshin
"""

from __future__ import print_function
import json, sys, os
from argparse import ArgumentParser

class PasswdParser:
    def __init__(self, stderr=sys.stderr):
        self.output = {}
        self.exit_code = 0
        self.stderr = stderr

    """
    Parses a line of /etc/passwd
    """
    def passwd_line_parser(self, line, line_number):
        segments = line.split(':')
        if len(segments) <= 4:
            self.stderr.write('passwd line #%d invalid\n' % line_number)
            self.exit_code = 1
            return
        self.output[segments[0]] = dict(uid = segments[2], full_name = segments[4], groups=[])


    """
    Parses a line of /etc/group
    """
    def group_line_parser(self, line, line_number):
        segments = line.split(':')
        if len(segments) <= 3:
            self.stderr.write('group line #%d invalid\n' % line_number)
            self.exit_code = 1
            return
        for user_name in segments[3].split(','):
            if user_name:
                if user_name in self.output:
                    self.output[user_name]['groups'].append(segments[0])
                else:
                    self.stderr.write('group line #%d user not found: %s\n' % (line_number, user_name))
                    self.exit_code = 1

    """
    Parses file given the parser for lines
    """
    def parse_file(self, name, line_parser):
        line_number = 0
        with open(name, 'r') as f:
            while True:
                line = f.readline()
                line_number += 1
                if not line:
                    break
                line = line.strip()
                if line and not line.startswith('#'):
                    line_parser(line, line_number)

    def main(self, passwd, group, indent):
        if not os.path.exists(passwd):
            self.stderr.write('No such passwd file: %s\n' % args.passwd)
            self.exit_code = 1

        if not os.path.exists(args.group):
            self.stderr.write('No such group file: %s\n' % args.group)
            self.exit_code = 1

        if self.exit_code == 0:
            self.parse_file(passwd, self.passwd_line_parser)
            self.parse_file(group, self.group_line_parser)

        return self.exit_code, json.dumps(self.output, indent=indent)


if __name__ == "__main__":
    parser = ArgumentParser(description='''
Combines /etc/passwd and /etc/groups files into a single json output.
If any line fails to parse it will be ignored.
Check for stderr and return code to see if there are any validation issues
''')

    parser.add_argument('-p', '--passwd', metavar='<path>', required=False, default='/etc/passwd', action='store',
                        help='override default /etc/passwd location')

    parser.add_argument('-g', '--group', metavar='<path>', required=False, default='/etc/group', action='store',
                        help='override default /etc/group location')

    parser.add_argument('-i', '--indent', metavar='<number>', required=False, type=int, default=None, action='store',
                        help='formats json, omit for single line output')

    args = parser.parse_args()

    exit_code, output = PasswdParser().main(args.passwd, args.group, args.indent)
    print(output)
    sys.exit(exit_code)
